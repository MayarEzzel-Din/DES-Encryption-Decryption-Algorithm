using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SecurityLibrary.DES
{
    /// <summary>
    /// If the string starts with 0x.... then it's Hexadecimal not string
    /// </summary>
    public class DES : CryptographicTechnique
    {
        public static string convertHexaToBin(string hexaText)
        {
            string binText = "";
            Dictionary<char, string> hexaBinDic = new Dictionary<char, string>{
            { '0', "0000"},
            { '1', "0001"},
            { '2', "0010"},
            { '3', "0011"},
            { '4', "0100"},
            { '5', "0101"},
            { '6', "0110"},
            { '7', "0111"},
            { '8', "1000"},
            { '9', "1001"},

            { 'A', "1010"},
            { 'B', "1011"},
            { 'C', "1100"},
            { 'D', "1101"},
            { 'E', "1110"},
            { 'F', "1111"}};

            hexaText = hexaText.Remove(0, 2);
            for (int i = 0; i < hexaText.Length; i++)
            {
                char search = hexaText[i];
                binText += hexaBinDic[search];
            }
            return binText;

        }
        public static string convertBinToHexa(string BinText)
        {
            string Hexatext = "";
            Dictionary<string, char> BinHexaDic = new Dictionary<string, char>{
            { "0000",'0'},
            { "0001",'1'},
            {  "0010",'2'},
            { "0011",'3'},
            { "0100",'4'},
            { "0101",'5'},
            {  "0110",'6'},
            { "0111",'7'},
            { "1000",'8'},
            { "1001",'9'},

            { "1010",'A'},
            {"1011",'B'},
            { "1100",'C'},
            { "1101",'D'},
            { "1110",'E'},
            { "1111",'F'}};

            Hexatext = "0x";
            for (int i = 0; i < BinText.Length; i += 4)
            {
                string bit = BinText.Substring(i, 4);
                char search = BinHexaDic[bit];
                Hexatext += search;
            }
            return Hexatext;

        }
        public static int[] PermutationTable =
        {
            16, 7, 20, 21,
            29, 12, 28, 17,
            1, 15, 23, 26,
            5, 18, 31, 10,
            2, 8, 24, 14,
            32, 27, 3, 9,
            19, 13, 30, 6,
            22, 11, 4, 25
        };
        public static int[] InitialPermutation =
        {
            58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7
        };

        public static int[] PC1 =
        {
            57, 49, 41, 33, 25, 17, 9,
            1, 58, 50, 42, 34, 26, 18,
            10, 2, 59, 51, 43, 35, 27,
            19, 11, 3, 60, 52, 44, 36,
            63, 55, 47, 39, 31, 23, 15,
            7, 62, 54, 46, 38, 30, 22,
            14, 6, 61, 53, 45, 37, 29,
            21, 13, 5, 28, 20, 12, 4
        };

        public static int[] PC2 =
        {
            14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32
        };
        public static int[] IP_inv =
       {
            40, 8, 48, 16, 56, 24, 64, 32,
            39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30,
            37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28,
            35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26,
            33, 1, 41, 9, 49, 17, 57, 25
        };

        public static int[] Expansion =
       {
            32, 1, 2, 3, 4, 5,
            4, 5, 6, 7, 8, 9,
            8, 9, 10, 11, 12, 13,
            12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21,
            20, 21, 22, 23, 24, 25,
            24, 25, 26, 27, 28, 29,
            28, 29, 30, 31, 32, 1
        };

        public static int[,] SBox1 =
                     {{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
                     {0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
                     {4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
                     {15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13} };
        public static int[,] SBox2 =
                       {{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
                       {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
                       {0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
                       {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}};

        public static int[,] SBox3 =
                       {{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
                       {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
                       {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
                       {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}};

        public static int[,] SBox4 =
                       {{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
                       {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
                       {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
                       {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}};
        public static int[,] SBox5 =
                      {{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
                      {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
                      {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
                      {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}};
        public static int[,] SBox6 =
                      {{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
                      {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
                      {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
                      {4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}};

        public static int[,] SBox7 =
                      {{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
                       {13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
                       {1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
                       {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}};

        public static int[,] SBox8 =
                      {{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
                       {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
                       {7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
                       {2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}};


        public static string permutate(string toBePermutated, int[] permutationReference)
        {
            string PermutatedText = "";
            int ind;
            for (int i = 0; i < permutationReference.Length; i++)
            {
                ind = permutationReference[i] - 1;
                PermutatedText += toBePermutated[ind];
            }
            return PermutatedText;
        }
        //consider 0-based
        public static int[] LeftShifts =
            { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };


        public static string CircularLeftShift(string key28bit, int roundNum)
        {
            int NumOfShifts = LeftShifts[roundNum - 1];
            string rotated = key28bit.Substring(NumOfShifts, key28bit.Length - NumOfShifts) + key28bit.Substring(0, NumOfShifts);
            return rotated;
        }

        public static string XORFunction(string a, string b)
        {
            string answer = "";
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == b[i])

                    answer += "0";

                else
                    answer += "1";
            }
            return answer;
        }

        public static string SBoxFunction(List<string> blocks, List<int[,]> Sboxess)
        {
            Dictionary<string, int> BinDic = new Dictionary<string, int>{
            { "0000",0},
            { "0001",1},
            { "0010",2},
            { "0011",3},
            { "0100",4},
            { "0101",5},
            { "0110",6},
            { "0111",7},
            { "1000",8},
            { "1001",9},

            { "1010",10},
            { "1011",11},
            { "1100",12},
            { "1101",13},
            { "1110",14},
            { "1111",15}};

            string S = "";
            string padd = "00";
            for (int i = 0; i < blocks.Count; i++)
            {
                string block = blocks[i];
                string row = padd + block.Substring(0, 1) + block.Substring(5, 1);
                int r = BinDic[row];
                string col = block.Substring(1, 4);
                int c = BinDic[col];
                int[,] arr = Sboxess[i];
                int num = arr[r, c];
                string value = BinDic.FirstOrDefault(x => x.Value == num).Key;
                S += value;

            }
            return S;
        }

        public static string RightShiftDec(string key, int roundNum)
        {
            int NumOfShifts = LeftShifts[roundNum - 1];
            return LeftShiftDec(key, key.Length - NumOfShifts, roundNum);
        }
        public static string LeftShiftDec(string key28bit, int d, int roundNum)
        {
            int NumOfShifts = LeftShifts[roundNum - 1];
            return key28bit.Substring(d, key28bit.Length - d) + key28bit.Substring(0, d);
        }
        public static List<string> Transform(string key56)
        {
            List<string> keys = new List<string>();
            
            string key1 = permutate(key56, PC2);
            keys.Add(key1);

            for(int i=1; i<16; i++)
            {
                string C = key56.Substring(0, 28);
                string D = key56.Substring(28, 28);
                C = RightShiftDec(C, i+1);
                D = RightShiftDec(D, i+1);
                key1 = permutate(C+D, PC2);
                keys.Add(key1);
                key56 = C + D;
            }
            return keys;
        }
        public static string F_Function(string R32, string key)
        {
            string F;
            string Right48PT = permutate(R32, Expansion);
            string NewR = XORFunction(Right48PT, key);

            List<string> RightPT8Blocks = new List<string>();
            for (int i = 0; i < 48; i += 6)
            {
                string block = NewR.Substring(i, 6);
                RightPT8Blocks.Add(block);
            }

            List<int[,]> Sboxes = new List<int[,]>();
            Sboxes.Add(SBox1);
            Sboxes.Add(SBox2);
            Sboxes.Add(SBox3);
            Sboxes.Add(SBox4);
            Sboxes.Add(SBox5);
            Sboxes.Add(SBox6);
            Sboxes.Add(SBox7);
            Sboxes.Add(SBox8);

            string Sbox32PT = SBoxFunction(RightPT8Blocks, Sboxes);
            F = permutate(Sbox32PT, PermutationTable);

            return F;
        }
        public override string Decrypt(string cipherText, string key)
        {
            string PT;
            string BinaryCT = convertHexaToBin(cipherText);
            string BinaryKey = convertHexaToBin(key);

            string Key56 = permutate(BinaryKey, PC1);
            List<string> keys = Transform(Key56);

            string permutedCT = permutate(BinaryCT, InitialPermutation);
            string NewR = "", NewL = "";
            for (int i = 0; i<16; i++)
            {
                string Left = permutedCT.Substring(0, 32);
                string Right = permutedCT.Substring(32, 32);

                NewL = Right;
                NewR = XORFunction(Left, F_Function(Right, keys[i]));
                permutedCT = NewL + NewR;
            }
            PT = permutate(NewR + NewL, IP_inv);
            PT = convertBinToHexa(PT);
            return PT;
        }

        public override string Encrypt(string plainText, string key)
        {
            string ciphertxt = "";
            string newplain = " ";
            string newRight = "";
            string newLeft = " ";
            string binary64PText = convertHexaToBin(plainText);
            string binary64Key = convertHexaToBin(key);
            string permutedPT = permutate(binary64PText, InitialPermutation);
            string permuted56Key = permutate(binary64Key, PC1);

            for (int k = 1; k <= 16; k++)
            {

                string block1key28 = permuted56Key.Substring(0, 28);
                string block2key28 = permuted56Key.Substring(28, 28);


                string shiftedBlock1Key = CircularLeftShift(block1key28, k);
                string shiftedBlock2Key = CircularLeftShift(block2key28, k);


                string shifted56key = shiftedBlock1Key + shiftedBlock2Key;
                //48 bit key after selection by PC2
                string PreRound48Key = permutate(shifted56key, PC2);
                //64 bit plain 
                //splitting plaintext into left and right
                string Left32PT = permutedPT.Substring(0, 32);

                string Right32PT = permutedPT.Substring(32, 32);

                string Right48PT = permutate(Right32PT, Expansion);

                string RightPT_XOR_key = XORFunction(Right48PT, PreRound48Key);

                //Create list dividing right part into 8 blocks each block 6 bit
                //plain 48 
                List<string> RightPT8Blocks = new List<string>();
                for (int i = 0; i < 48; i += 6)
                {
                    string block = RightPT_XOR_key.Substring(i, 6);
                    RightPT8Blocks.Add(block);
                }

                List<int[,]> Sboxes = new List<int[,]>();
                Sboxes.Add(SBox1);
                Sboxes.Add(SBox2);
                Sboxes.Add(SBox3);
                Sboxes.Add(SBox4);
                Sboxes.Add(SBox5);
                Sboxes.Add(SBox6);
                Sboxes.Add(SBox7);
                Sboxes.Add(SBox8);

                string Sbox32PT = SBoxFunction(RightPT8Blocks, Sboxes);
                string permute32 = permutate(Sbox32PT, PermutationTable);
                newRight = "";
                newRight = XORFunction(permute32, Left32PT);
                newLeft = "";
                newLeft = Right32PT;
                newplain = "";
                newplain = newLeft + newRight;
                string key1 = shiftedBlock1Key + shiftedBlock2Key;
                permutedPT = newplain;
                permuted56Key = key1;

            }
            string finalPlain = newRight + newLeft;
            string final = permutate(finalPlain, IP_inv);
            ciphertxt = convertBinToHexa(final);

            return ciphertxt;
        }

    }
}
